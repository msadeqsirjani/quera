// <auto-generated />
using System;
using ChatApplication.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChatApplication.Infra.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220311105202_Update-Database-1")]
    partial class UpdateDatabase1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ChatApplication.Domain.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SourceMemberId")
                        .HasColumnType("int");

                    b.Property<int>("TargetMemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SourceMemberId");

                    b.HasIndex("TargetMemberId");

                    b.ToTable("Chats", "Chat");
                });

            modelBuilder.Entity("ChatApplication.Domain.Entities.ConnectionRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("SourceGroupId")
                        .HasColumnType("int");

                    b.Property<int>("TargetGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SourceGroupId");

                    b.ToTable("ConnectionRequests");
                });

            modelBuilder.Entity("ChatApplication.Domain.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Administrator")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Administrator")
                        .IsUnique();

                    b.ToTable("Groups", "Chat");
                });

            modelBuilder.Entity("ChatApplication.Domain.Entities.GroupMember", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("MemberType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("GroupMembers", "Chat");
                });

            modelBuilder.Entity("ChatApplication.Domain.Entities.JoinRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("MemberId");

                    b.ToTable("JoinRequests");
                });

            modelBuilder.Entity("ChatApplication.Domain.Entities.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Members", "Chat");
                });

            modelBuilder.Entity("ChatApplication.Domain.Entities.Chat", b =>
                {
                    b.HasOne("ChatApplication.Domain.Entities.Member", "SourceMember")
                        .WithMany("SourceChats")
                        .HasForeignKey("SourceMemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ChatApplication.Domain.Entities.Member", "TargetMember")
                        .WithMany("TargetChats")
                        .HasForeignKey("TargetMemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SourceMember");

                    b.Navigation("TargetMember");
                });

            modelBuilder.Entity("ChatApplication.Domain.Entities.ConnectionRequest", b =>
                {
                    b.HasOne("ChatApplication.Domain.Entities.Group", "SourceGroup")
                        .WithMany("SourceConnectionRequests")
                        .HasForeignKey("SourceGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SourceGroup");
                });

            modelBuilder.Entity("ChatApplication.Domain.Entities.Group", b =>
                {
                    b.HasOne("ChatApplication.Domain.Entities.Member", "Member")
                        .WithOne("Group")
                        .HasForeignKey("ChatApplication.Domain.Entities.Group", "Administrator")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ChatApplication.Domain.Entities.GroupMember", b =>
                {
                    b.HasOne("ChatApplication.Domain.Entities.Group", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChatApplication.Domain.Entities.Member", "Member")
                        .WithMany("GroupMembers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ChatApplication.Domain.Entities.JoinRequest", b =>
                {
                    b.HasOne("ChatApplication.Domain.Entities.Group", "Group")
                        .WithMany("JoinRequests")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChatApplication.Domain.Entities.Member", "Member")
                        .WithMany("JoinRequests")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ChatApplication.Domain.Entities.Group", b =>
                {
                    b.Navigation("GroupMembers");

                    b.Navigation("JoinRequests");

                    b.Navigation("SourceConnectionRequests");
                });

            modelBuilder.Entity("ChatApplication.Domain.Entities.Member", b =>
                {
                    b.Navigation("Group")
                        .IsRequired();

                    b.Navigation("GroupMembers");

                    b.Navigation("JoinRequests");

                    b.Navigation("SourceChats");

                    b.Navigation("TargetChats");
                });
#pragma warning restore 612, 618
        }
    }
}
